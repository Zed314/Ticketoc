version: '3.5'
services:
  dashboard:
    image: admo120104/ticketoc:dashboard
    build: dashboard/
    ports:
      - 8080:80
    depends_on:
      - web-sockets-server
  entrypoint:
    image: admo120104/ticketoc:entrypoint
    build: entrypoint/
    environment:
      ROUTE: /v1/tickets
      KAFKA_CONNECT: kafka:9092
      KAFKA_TOPIC: input_tickets
      KAFKA_VALUE_SERIALIZER: json
    networks:
      - default
      - generator-net
    command: [
      "./wait-for-it.sh", "kafka:9092",         "--",
      "./wait-for-it.sh", "schema-registry:80", "--",
      "python", "entrypoint.py"
    ]
    depends_on:
      - kafka
      - schema-registry
  schema-registry:
    image: admo120104/ticketoc:schema-registry
    build: schema-registry/
  web-sockets-server:
    image: admo120104/ticketoc:web-sockets-server
    build: web-sockets-server/
    command: [
      "./wait-for-it.sh", "kafka:9092", "--",
      "python", "web-sockets-server.py"
    ]
    environment:
      KAFKA_CONNECT: kafka:9092
      KAFKA_TOPICS: input_tickets
      KAFKA_VALUE_DESERIALIZER: json
    ports:
      - 40510:40510
    depends_on:
      - kafka
      - spark
  zookeeper:
    image: zookeeper:latest
  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: input_tickets:4:1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/kafka:/kafka
    depends_on:
      - zookeeper
  backend:
    image: admo120104/ticketoc:backend
    build: backend/
    command: [
      "./wait-for-it.sh", "database:27017", "--",
      "python", "backend.py",
    ]
    environment:
      DATABASE: database:27017
    depends_on:
      - database-init
      - database
  database:
    image: mongo:latest
    volumes:
    - ./volumes/database:/data/db
  database-init:
    image: admo120104/ticketoc:database-init
    build: database/init/
    depends_on:
      - database
  spark:
    image: admo120104/ticketoc:spark
    build: spark/
#    command: [
#      "./wait-for-it.sh", "schema-registry:80", "--",
#      "./wait-for-it.sh", "database:27017",     "--",
#      "cmd to launch", "spark job"
#    ]
    depends_on:
      - kafka
      - database
      - database-init
      - schema-registry
networks:
  generator-net:
    driver: bridge
