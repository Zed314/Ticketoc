version: '3.5'

# Rule for attributes ordering :
# image > build  > cmd > env > ports > volumes > depends_on > networks > deploy
# placement > restart_policy > replicas

services:

########## APPLICATION ##########
  dashboard:
    image: admo120104/ticketoc:dashboard
    build: dashboard/
    ports:
      - 8080:80
    depends_on:
      - web-sockets-server
    deploy:
      replicas: 2


  web-sockets-server:
    image: admo120104/ticketoc:web-sockets-server
    build: web-sockets-server/
    command: [
      "./wait-for-it.sh", "kafka:9092", "--timeout=120", "--strict", "--",
      "./wait-for-it.sh", "schema-registry:80", "--timeout=120","--",
      "python", "web-sockets-server.py"
    ]
    environment:
      KAFKA_CONNECT: kafka:9092
      KAFKA_TOPICS: input-tickets
      KAFKA_VALUE_DESERIALIZER: avro
      SCHEMA_REGISTRY: schema-registry:80
    ports:
      - 40510:40510
    depends_on:
      - kafka
      - ingestion
      - schema-registry
    deploy:
      replicas: 2


  backend:
    image: admo120104/ticketoc:backend
    build: backend/
    command: [
      "./wait-for-it.sh", "database:27017", "--timeout=120", "--strict", "--",
      "python", "backend.py",
    ]
    environment:
      DATABASE: database:27017
    ports:
      - 10000:80
    depends_on:
      - database
    deploy:
      replicas: 2

########## DATABASE ##########
  databasefeeder:
    image: admo120104/ticketoc:databasefeeder
    build: databasefeeder/
    command: [
      "./wait-for-it.sh", "kafka:9092", "--timeout=120", "--strict", "--",
      "./wait-for-it.sh", "schema-registry:80", "--timeout=120", "--",
      "python", "databasefeeder.py"
    ]
    environment:
      KAFKA_CONNECT: kafka:9092
      KAFKA_TOPICS: input-tickets
      KAFKA_VALUE_DESERIALIZER: avro
      SCHEMA_REGISTRY: schema-registry:80
      DATABASE: database:27017
    depends_on:
      - kafka
      - database
      - schema-registry
   # deploy:
    #  replicas: 2
  database:
    image: mongo:latest
    volumes:
    - ./volumes/database:/data/
    - ./database:/docker-entrypoint-initdb.d
    deploy:
      placement:
        constraints:
          - node.role == manager

########## ENTRYPOINT ##########
  entrypoint:
    image: admo120104/ticketoc:entrypoint
    build: entrypoint/
    command: [
      "./wait-for-it.sh", "kafka:9092",         "--timeout=120", "--strict", "--",
      "./wait-for-it.sh", "schema-registry:80", "--timeout=120", "--strict", "--",
      "python", "entrypoint.py"
    ]
    environment:
      ROUTE: /v1/tickets
      KAFKA_CONNECT: kafka:9092
      KAFKA_TOPIC: input-tickets
      KAFKA_VALUE_SERIALIZER: avro
    ports:
      - 8000:80
    depends_on:
      - kafka
      - schema-registry
    networks:
      - default
      - extra-net
    deploy:
      replicas: 2

  schema-registry:
    image: admo120104/ticketoc:schema-registry
    build: schema-registry/
    ports:
      - 9000:80
    networks:
      - default
      - extra-net
    deploy:
      replicas: 2

########## MESSAGE BROKER ##########
  zookeeper:
    image: zookeeper:latest

  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: input-tickets:4:1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/kafka:/kafka
    depends_on:
      - zookeeper
    deploy:
      placement:
        constraints:
          - node.role == manager

########## INGESTION ##########
  ingestion:
    image: admo120104/ticketoc:ingestion
    build: ingestion/
    command: [
      "./wait-for-it.sh", "schema-registry:80", "--timeout=120", "--strict", "--",
      "./wait-for-it.sh", "database:27017",     "--timeout=120", "--strict", "--",
      "sh", "template.sh"
    ]
    environment:
      ENABLE_INIT_DAEMON: 'false'
      SPARK_APPLICATION_MAIN_CLASS: fr.insa.ticketoc.ingestion.tickets.StreamingKafkaLatest
    ports:
    - 4040:4040
    depends_on:
      - kafka
      - database
      - schema-registry

########## VISUALIZER ##########
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - 7000:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints:
          - node.role == manager
      replicas: 2

########## NETWORKS ##########
networks:
  extra-net:
